/**
 * Cart Item Integration Tests
 * 
 * Comprehensive integration tests for Cart Item module covering:
 * - Cart item addition with database verification
 * - Cart item updates and quantity changes
 * - Cart item removal and cleanup
 * - Cart item validation and constraints
 * - Cart item pricing and calculations
 * - Cart item inventory validation
 * - Cart item bulk operations
 * - Cart item relationship management
 */

import request from 'supertest';

describe('Cart Item Integration Tests', () => {
  const SERVER_URL = 'http://localhost:1337';
  let adminToken: string;
  let testUser: any;
  let testProduct: any;
  let testCategory: any;
  let testProductListing: any;
  let testOptionGroup: any;
  let testOptionValue: any;
  let testVariant: any;
  let testCart: any;
  
  // Track all created users for cleanup
  const createdUsers: any[] = [];
  
  // Generate unique test data with timestamp
  const timestamp = Date.now();

  beforeAll(async () => {
    // Get admin token for authenticated requests
    adminToken = process.env.STRAPI_API_TOKEN as string;

    if (!adminToken) {
      throw new Error('STRAPI_API_TOKEN environment variable is not set. Please ensure the test server is running and the token is generated.');
    }

    // Create test user for cart operations
    const userData = {
      username: `testuser${timestamp}`,
      email: `testuser${timestamp}@example.com`,
      password: 'TestPassword123!',
    };

    const userResponse = await request(SERVER_URL)
      .post('/api/auth/local/register')
      .send(userData)
      .timeout(10000);

    if (userResponse.status !== 200) {
      throw new Error(`Failed to create test user: ${userResponse.status} - ${JSON.stringify(userResponse.body)}`);
    }

    testUser = userResponse.body.user;
    createdUsers.push(testUser);

    // Create test category for product listing
    const categoryData = {
      name: `Test Category ${timestamp}`,
      slug: `test-category-${timestamp}`,
      description: 'Test category for cart item integration tests',
      isActive: true,
      status: 'published'
    };

    const categoryResponse = await request(SERVER_URL)
      .post('/api/categories')
      .set('Authorization', `Bearer ${adminToken}`)
      .send({ data: categoryData })
      .expect([200, 201])
      .timeout(10000);
    testCategory = categoryResponse.body.data;

    // Create test product for cart operations
    const productData = {
      name: `Test Product ${timestamp}`,
      sku: `TEST-PROD-${timestamp}`,
      basePrice: 129.99,
      discountPrice: 39.99,
      inventory: 100,
      isActive: true,
      status: 'active',
      category: testCategory.documentId
    };

    const productResponse = await request(SERVER_URL)
      .post('/api/products')
      .set('Authorization', `Bearer ${adminToken}`)
      .send({ data: productData })
      .expect([200, 201])
      .timeout(10000);

    testProduct = productResponse.body.data;

    // Create test option group
    const optionGroupData = {
      name: `Test Option Group ${timestamp}`,
      displayName: 'Size',
      type: 'select',
    };

    const optionGroupResponse = await request(SERVER_URL)
      .post('/api/option-groups')
      .set('Authorization', `Bearer ${adminToken}`)
      .send({ data: optionGroupData })
      .expect([200, 201])
      .timeout(10000);

    testOptionGroup = optionGroupResponse.body.data;

    // Create test option value
    const optionValueData = {
      value: `Test Option Value ${timestamp}`,
      displayName: 'Large',
      optionGroup: testOptionGroup.documentId,
    };

    const optionValueResponse = await request(SERVER_URL)
      .post('/api/option-values')
      .set('Authorization', `Bearer ${adminToken}`)
      .send({ data: optionValueData })
      .expect([200, 201])
      .timeout(10000);

    testOptionValue = optionValueResponse.body.data;

    // Create test product listing for cart operations
    const productListingData = {
      title: `Test Product Listing ${timestamp}`,
      description: 'Test product listing for cart integration tests',
      type: 'variant',
      basePrice: 29.99,
      isActive: true,
      product: testProduct.documentId,
      category: testCategory.documentId,
      status: 'published',
      optionGroups: [testOptionGroup.documentId]
    };

    const productListingResponse = await request(SERVER_URL)
      .post('/api/product-listings')
      .set('Authorization', `Bearer ${adminToken}`)
      .send({ data: productListingData })
      .expect([200, 201])
      .timeout(10000);

    testProductListing = productListingResponse.body;

    // Create test variant for cart operations
    const variantData = {
      basePrice: 29.99,
      discountPrice: 24.99,
      product: testProduct.documentId,
      optionValue: testOptionValue.documentId,
      productListing: testProductListing.documentId,
    };

    const variantResponse = await request(SERVER_URL)
      .post('/api/product-listing-variants')
      .set('Authorization', `Bearer ${adminToken}`)
      .send({ data: variantData })
      .expect([200, 201])
      .timeout(10000);

    testVariant = variantResponse.body.data;
  });

  afterAll(async () => {
    // Clean up all created users
    for (const user of createdUsers) {
      if (user?.id) {
        try {
          await request(SERVER_URL)
            .delete(`/api/users/${user.id}`)
            .set('Authorization', `Bearer ${adminToken}`)
            .expect(200)
            .timeout(10000);
        } catch (error) {
          console.warn(`Failed to clean up user ${user.id}:`, error.message);
        }
      }
    }

    if (testVariant?.documentId) {
      try {
        await request(SERVER_URL)
          .delete(`/api/product-listing-variants/${testVariant.documentId}`)
          .set('Authorization', `Bearer ${adminToken}`)
          .timeout(10000);
      } catch (error) {
        console.warn('Failed to clean up test variant:', error.message);
      }
    }

    if (testOptionValue?.documentId) {
      try {
        await request(SERVER_URL)
          .delete(`/api/option-values/${testOptionValue.documentId}`)
          .set('Authorization', `Bearer ${adminToken}`)
          .timeout(10000);
      } catch (error) {
        console.warn('Failed to clean up test option value:', error.message);
      }
    }

    if (testOptionGroup?.documentId) {
      try {
        await request(SERVER_URL)
          .delete(`/api/option-groups/${testOptionGroup.documentId}`)
          .set('Authorization', `Bearer ${adminToken}`)
          .timeout(10000);
      } catch (error) {
        console.warn('Failed to clean up test option group:', error.message);
      }
    }

    if (testProductListing?.documentId) {
      try {
        await request(SERVER_URL)
          .delete(`/api/product-listings/${testProductListing.documentId}`)
          .set('Authorization', `Bearer ${adminToken}`)
          .timeout(10000);
      } catch (error) {
        console.warn('Failed to clean up test product listing:', error.message);
      }
    }

    if (testProduct?.documentId) {
      try {
        await request(SERVER_URL)
          .delete(`/api/products/${testProduct.documentId}`)
          .set('Authorization', `Bearer ${adminToken}`)
          .timeout(10000);
      } catch (error) {
        console.warn('Failed to clean up test product:', error.message);
      }
    }

    if (testCategory?.documentId) {
      try {
        await request(SERVER_URL)
          .delete(`/api/categories/${testCategory.documentId}`)
          .set('Authorization', `Bearer ${adminToken}`)
          .timeout(10000);
      } catch (error) {
        console.warn('Failed to clean up test category:', error.message);
      }
    }
  });

  describe('Cart Item Addition with Database Verification', () => {
    it('should add item to cart and verify database record', async () => {
      // First, authenticate the test user to get their JWT token
      const loginResponse = await request(SERVER_URL)
        .post('/api/auth/local')
        .send({
          identifier: testUser.email,
          password: 'TestPassword123!'
        })
        .timeout(10000);

      if (loginResponse.status !== 200) {
        throw new Error(`Failed to authenticate test user: ${loginResponse.status} - ${JSON.stringify(loginResponse.body)}`);
      }

      const userToken = loginResponse.body.jwt;

      // Add item to cart (this should create a cart if one doesn't exist)
      const addItemResponse = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          productId: testProduct.documentId,
          productListingId: testProductListing.documentId,
          variantId: testVariant.documentId,
          quantity: 2
        })
        .timeout(10000);
      if (addItemResponse.status !== 200) {
        console.log('Cart item creation failed:', addItemResponse.status, addItemResponse.body);
        throw new Error(`Failed to add item to cart: ${addItemResponse.status} - ${JSON.stringify(addItemResponse.body)}`);
      }
      
      expect(addItemResponse.status).toBe(200);
      expect(addItemResponse.body.data.cartItem).toBeDefined();
      expect(addItemResponse.body.data.cartItem.quantity).toBe(2);
      expect(addItemResponse.body.data.cartItem.price).toBeGreaterThan(0);
      expect(addItemResponse.body.data.cartItem.total).toBeGreaterThan(0);

      // Store cart for cleanup
      testCart = addItemResponse.body.data.cart;

      // Verify cart item was created in database
      const cartItemResponse = await request(SERVER_URL)
        .get(`/api/cart-items/${addItemResponse.body.data.cartItem.documentId}?populate=*`)
        .set('Authorization', `Bearer ${adminToken}`)
        .expect(200)
        .timeout(10000);
      expect(cartItemResponse.body.data.documentId).toBe(addItemResponse.body.data.cartItem.documentId);
      expect(cartItemResponse.body.data.quantity).toBe(2);
      expect(cartItemResponse.body.data.product.documentId).toBe(testProduct.documentId);
      expect(cartItemResponse.body.data.variant.documentId).toBe(testVariant.documentId);
    });

    it('should add item without variant to cart', async () => {
      const loginResponse = await request(SERVER_URL)
        .post('/api/auth/local')
        .send({
          identifier: testUser.email,
          password: 'TestPassword123!'
        })
        .timeout(10000);

      const userToken = loginResponse.body.jwt;

      // Create a simple product listing without variants
      const simpleProductListingData = {
        title: `Simple Product ${timestamp}`,
        description: 'Simple product without variants',
        type: 'single',
        basePrice: 19.99,
        isActive: true,
        product: testProduct.documentId,
        status: 'published'
      };

      const simpleProductListingResponse = await request(SERVER_URL)
        .post('/api/product-listings')
        .set('Authorization', `Bearer ${adminToken}`)
        .send({ data: simpleProductListingData })
        .timeout(10000);

      if (simpleProductListingResponse.status !== 200) {
        throw new Error(`Failed to create simple product listing: ${simpleProductListingResponse.status}`);
      }

      const simpleProductListing = simpleProductListingResponse.body;

      // Add item to cart without variant
      const addItemResponse = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          productId: testProduct.documentId,
          productListingId: simpleProductListing.documentId,
          quantity: 1
        })
        .timeout(10000);
      expect(addItemResponse.status).toBe(200);
      expect(addItemResponse.body.data.cartItem).toBeDefined();
      expect(addItemResponse.body.data.cartItem.variant).toBeNull();

      // Clean up simple product listing
      await request(SERVER_URL)
        .delete(`/api/product-listings/${simpleProductListing.documentId}`)
        .set('Authorization', `Bearer ${adminToken}`)
        .timeout(10000);
    });
  });

  describe('Cart Item Updates and Quantity Changes', () => {
    let userToken: string;
    let cartItem: any;

    beforeAll(async () => {
      // Authenticate user and create cart with item
      const loginResponse = await request(SERVER_URL)
        .post('/api/auth/local')
        .send({
          identifier: testUser.email,
          password: 'TestPassword123!'
        })
        .timeout(10000);

      userToken = loginResponse.body.jwt;

      // Add item to cart
      const addItemResponse = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          productId: testProduct.documentId,
          productListingId: testProductListing.documentId,
          variantId: testVariant.documentId,
          quantity: 3
        })
        .timeout(10000);

      cartItem = addItemResponse.body.data.cartItem;
    });

    it.only('should update cart item quantity', async () => {
      const newQuantity = 5;

      const response = await request(SERVER_URL)
        .put(`/api/cart-items/${cartItem.documentId}`)
        .set('Authorization', `Bearer ${adminToken}`)
        .send({ data: { quantity: newQuantity } })
        .timeout(10000);
      console.log(response.body);
      expect(response.status).toBe(200);
      expect(response.body.data.quantity).toBe(newQuantity);
      expect(response.body.data.total).toBe(cartItem.price * newQuantity);
    });

    it('should update cart item notes', async () => {
      const notes = 'Special instructions for this item';

      const response = await request(SERVER_URL)
        .put(`/api/cart-items/${cartItem.documentId}`)
        .set('Authorization', `Bearer ${userToken}`)
        .send({ notes })
        .expect(201)
        .timeout(10000);
      
      expect(response.body.data.notes).toBe(notes);
    });

    it('should update cart item selected options', async () => {
      const selectedOptions = {
        color: 'red',
        size: 'large',
        material: 'cotton'
      };

      const response = await request(SERVER_URL)
        .put(`/api/cart-items/${cartItem.documentId}`)
        .set('Authorization', `Bearer ${userToken}`)
        .send({ selectedOptions })
        .expect(201)
        .timeout(10000);
      
      expect(response.body.data.selectedOptions).toEqual(selectedOptions);
    });

    it('should reject invalid quantity updates', async () => {
      await request(SERVER_URL)
        .put(`/api/cart-items/${cartItem.documentId}`)
        .set('Authorization', `Bearer ${userToken}`)
        .send({ quantity: 0 })
        .expect(400)
        .timeout(10000);

      await request(SERVER_URL)
        .put(`/api/cart-items/${cartItem.documentId}`)
        .set('Authorization', `Bearer ${userToken}`)
        .send({ quantity: -1 })
        .expect(400)
        .timeout(10000);
    });

    it('should return 404 for non-existent cart item', async () => {
      const nonExistentDocumentId = 'non-existent-document-id';

      await request(SERVER_URL)
        .put(`/api/cart-items/${nonExistentDocumentId}`)
        .set('Authorization', `Bearer ${userToken}`)
        .send({ quantity: 3 })
        .expect(404)
        .timeout(10000);
    });
  });

  describe('Cart Item Removal and Cleanup', () => {
    let userToken: string;
    let cartItem: any;

    beforeAll(async () => {
      // Authenticate user and create cart with item
      const loginResponse = await request(SERVER_URL)
        .post('/api/auth/local')
        .send({
          identifier: testUser.email,
          password: 'TestPassword123!'
        })
        .timeout(10000);

      userToken = loginResponse.body.jwt;

      // Add item to cart
      const addItemResponse = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          productId: testProduct.documentId,
          productListingId: testProductListing.documentId,
          variantId: testVariant.documentId,
          quantity: 2
        })
        .timeout(10000);

      cartItem = addItemResponse.body.data.cartItem;
    });

    it('should remove cart item and verify deletion', async () => {
      const response = await request(SERVER_URL)
        .delete(`/api/cart-items/${cartItem.documentId}`)
        .set('Authorization', `Bearer ${userToken}`)
        .expect(201)
        .timeout(10000);

      expect(response.body.data.message).toBe('Cart item removed successfully');

      // Verify item is removed by checking cart
      const cartResponse = await request(SERVER_URL)
        .get('/api/carts/current')
        .set('Authorization', `Bearer ${userToken}`)
        .expect(201)
        .timeout(10000);

      expect(cartResponse.body.data.items).toHaveLength(0);
    });

    it('should return 404 for non-existent cart item removal', async () => {
      const nonExistentDocumentId = 'non-existent-document-id';

      await request(SERVER_URL)
        .delete(`/api/cart-items/${nonExistentDocumentId}`)
        .set('Authorization', `Bearer ${userToken}`)
        .expect(404)
        .timeout(10000);
    });
  });

  describe('Cart Item Validation and Constraints', () => {
    let userToken: string;

    beforeAll(async () => {
      // Authenticate user
      const loginResponse = await request(SERVER_URL)
        .post('/api/auth/local')
        .send({
          identifier: testUser.email,
          password: 'TestPassword123!'
        })
        .timeout(10000);

      userToken = loginResponse.body.jwt;
    });

    it('should reject adding item with invalid product', async () => {
      const response = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          product: 'non-existent-product-id',
          productListing: testProductListing.documentId,
          quantity: 1
        })
        .timeout(10000);
      
      expect(response.status).toBe(404);
    });

    it('should reject adding item with invalid product listing', async () => {
      const response = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          product: testProduct.documentId,
          productListing: 'non-existent-listing-id',
          quantity: 1
        })
        .timeout(10000);
      
      expect(response.status).toBe(404);
    });

    it('should reject adding item with invalid variant', async () => {
      const response = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          productId: testProduct.documentId,
          productListingId: testProductListing.documentId,
          variant: 'non-existent-variant-id',
          quantity: 1
        })
        .timeout(10000);
      
      expect(response.status).toBe(404);
    });

    it('should reject adding item with zero quantity', async () => {
      const response = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          productId: testProduct.documentId,
          productListingId: testProductListing.documentId,
          quantity: 0
        })
        .timeout(10000);
      
      expect(response.status).toBe(400);
    });

    it('should reject adding item with negative quantity', async () => {
      const response = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          productId: testProduct.documentId,
          productListingId: testProductListing.documentId,
          quantity: -1
        })
        .timeout(10000);
      
      expect(response.status).toBe(400);
    });
  });

  describe('Cart Item Pricing and Calculations', () => {
    let userToken: string;

    beforeAll(async () => {
      // Authenticate user
      const loginResponse = await request(SERVER_URL)
        .post('/api/auth/local')
        .send({
          identifier: testUser.email,
          password: 'TestPassword123!'
        })
        .timeout(10000);

      userToken = loginResponse.body.jwt;
    });

    it('should calculate item total correctly', async () => {
      const quantity = 3;
      const expectedPrice = 29.99;

      const response = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          productId: testProduct.documentId,
          productListingId: testProductListing.documentId,
          variantId: testVariant.documentId,
          quantity
        })
        .timeout(10000);
      
      expect(response.status).toBe(200);
      expect(response.body.data.cartItem.price).toBe(expectedPrice);
      expect(response.body.data.cartItem.total).toBe(expectedPrice * quantity);
    });

    it('should update totals when quantity changes', async () => {
      // Add item to cart
      const addItemResponse = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          productId: testProduct.documentId,
          productListingId: testProductListing.documentId,
          variantId: testVariant.documentId,
          quantity: 2
        })
        .timeout(10000);

      const cartItem = addItemResponse.body.data.cartItem;
      const originalTotal = cartItem.total;

      // Update quantity
      const newQuantity = 4;
      const updateResponse = await request(SERVER_URL)
        .put(`/api/cart-items/${cartItem.documentId}`)
        .set('Authorization', `Bearer ${userToken}`)
        .send({ quantity: newQuantity })
        .expect(201)
        .timeout(10000);

      expect(updateResponse.body.data.total).toBe(cartItem.price * newQuantity);
      expect(updateResponse.body.data.total).toBeGreaterThan(originalTotal);
    });
  });

  describe('Cart Item Inventory Validation', () => {
    let userToken: string;

    beforeAll(async () => {
      // Authenticate user
      const loginResponse = await request(SERVER_URL)
        .post('/api/auth/local')
        .send({
          identifier: testUser.email,
          password: 'TestPassword123!'
        })
        .timeout(10000);

      userToken = loginResponse.body.jwt;
    });

    it('should reject adding item exceeding inventory', async () => {
      // Try to add more items than available in inventory
      const response = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          productId: testProduct.documentId,
          productListingId: testProductListing.documentId,
          variantId: testVariant.documentId,
          quantity: 1000 // More than available inventory
        })
        .timeout(10000);
      
      expect(response.status).toBe(400);
      expect(response.body.error.message).toContain('insufficient inventory');
    });

    it('should allow adding item within inventory limits', async () => {
      const response = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          productId: testProduct.documentId,
          productListingId: testProductListing.documentId,
          variantId: testVariant.documentId,
          quantity: 5 // Within inventory limits
        })
        .timeout(10000);
      
      expect(response.status).toBe(200);
      expect(response.body.data.cartItem.quantity).toBe(5);
    });
  });

  describe('Cart Item Bulk Operations', () => {
    let userToken: string;

    beforeAll(async () => {
      // Authenticate user
      const loginResponse = await request(SERVER_URL)
        .post('/api/auth/local')
        .send({
          identifier: testUser.email,
          password: 'TestPassword123!'
        })
        .timeout(10000);

      userToken = loginResponse.body.jwt;
    });

    it('should handle multiple cart item additions', async () => {
      const items = [
        {
          productId: testProduct.documentId,
          productListingId: testProductListing.documentId,
          variantId: testVariant.documentId,
          quantity: 2
        },
        {
          productId: testProduct.documentId,
          productListingId: testProductListing.documentId,
          variantId: testVariant.documentId,
          quantity: 3
        }
      ];

      const responses: any[] = [];
      for (const item of items) {
        const response = await request(SERVER_URL)
          .post('/api/carts/items')
          .set('Authorization', `Bearer ${userToken}`)
          .send(item)
          .timeout(10000);
        
        responses.push(response);
      }

      responses.forEach(response => {
        expect(response.status).toBe(200);
        expect(response.body.data.cartItem).toBeDefined();
      });
    });

    it('should handle bulk cart item updates', async () => {
      // First add items to cart
      const addItemResponse = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          productId: testProduct.documentId,
          productListingId: testProductListing.documentId,
          variantId: testVariant.documentId,
          quantity: 1
        })
        .timeout(10000);

      const cartItem = addItemResponse.body.data.cartItem;

      // Update multiple properties at once
      const updateData = {
        quantity: 5,
        notes: 'Updated notes',
        selectedOptions: { color: 'blue', size: 'medium' }
      };

      const response = await request(SERVER_URL)
        .put(`/api/cart-items/${cartItem.documentId}`)
        .set('Authorization', `Bearer ${userToken}`)
        .send(updateData)
        .expect(201)
        .timeout(10000);

      expect(response.body.data.quantity).toBe(updateData.quantity);
      expect(response.body.data.notes).toBe(updateData.notes);
      expect(response.body.data.selectedOptions).toEqual(updateData.selectedOptions);
    });
  });

  describe('Cart Item Relationship Management', () => {
    let userToken: string;

    beforeAll(async () => {
      // Authenticate user
      const loginResponse = await request(SERVER_URL)
        .post('/api/auth/local')
        .send({
          identifier: testUser.email,
          password: 'TestPassword123!'
        })
        .timeout(10000);

      userToken = loginResponse.body.jwt;
    });

    it('should maintain cart item relationships', async () => {
      // Add item to cart
      const addItemResponse = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          productId: testProduct.documentId,
          productListingId: testProductListing.documentId,
          variantId: testVariant.documentId,
          quantity: 2
        })
        .timeout(10000);

      const cartItem = addItemResponse.body.data.cartItem;

      // Verify relationships are maintained
      expect(cartItem.cart).toBeDefined();
      expect(cartItem.product).toBeDefined();
      expect(cartItem.productListing).toBeDefined();
      expect(cartItem.variant).toBeDefined();

      // Verify cart contains the item
      const cartResponse = await request(SERVER_URL)
        .get('/api/carts/current')
        .set('Authorization', `Bearer ${userToken}`)
        .expect(201)
        .timeout(10000);

      expect(cartResponse.body.data.items).toHaveLength(1);
      expect(cartResponse.body.data.items[0].documentId).toBe(cartItem.documentId);
    });

    it('should handle cart item deletion and relationship cleanup', async () => {
      // Add item to cart
      const addItemResponse = await request(SERVER_URL)
        .post('/api/carts/items')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          productId: testProduct.documentId,
          productListingId: testProductListing.documentId,
          variantId: testVariant.documentId,
          quantity: 1
        })
        .timeout(10000);

      const cartItem = addItemResponse.body.data.cartItem;

      // Delete the cart item
      await request(SERVER_URL)
        .delete(`/api/cart-items/${cartItem.documentId}`)
        .set('Authorization', `Bearer ${userToken}`)
        .expect(201)
        .timeout(10000);

      // Verify cart no longer contains the item
      const cartResponse = await request(SERVER_URL)
        .get('/api/carts/current')
        .set('Authorization', `Bearer ${userToken}`)
        .expect(201)
        .timeout(10000);

      expect(cartResponse.body.data.items).toHaveLength(0);
    });
  });
});
