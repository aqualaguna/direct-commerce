/**
 * User Integration Tests
 * 
 * Comprehensive integration tests for User module covering:
 * - CRUD operations with database verification
 * - User registration and authentication workflows
 * - User profile management and updates
 * - User password management and security
 * - User email verification workflows
 * - User account status management
 * - User validation and error handling
 * - User search and filtering
 * - User bulk operations
 */

import { describe, it, expect, beforeEach, afterEach, beforeAll, afterAll } from '@jest/globals';
import { IntegrationTestBase } from '../../../utils/integration-test-base';
import { TestDataFactory, CreatedUserData } from '../../../utils/test-factories';
import { TestDataSeeder } from '../../../utils/test-seeders';

class UserIntegrationTest extends IntegrationTestBase {
  public factory!: TestDataFactory;
  public seeder!: TestDataSeeder;

  constructor() {
    super({
      useTransactions: true,
      cleanupAfterEach: true,
      verbose: process.env.TEST_VERBOSE === 'true'
    });
  }

  async beforeAll(): Promise<void> {
    await super.beforeAll();
    this.factory = new TestDataFactory(this.strapi);
    this.seeder = new TestDataSeeder(this.strapi, {
      seedCategories: true,
      seedProducts: true,
      seedUsers: false, // We'll create users in tests
      categoryCount: 3,
      productCount: 5,
      userCount: 0
    });
  }

  async afterAll(): Promise<void> {
    await super.afterAll();
  }

  async beforeEach(): Promise<void> {
    await super.beforeEach();
    // Seed test data for each test
    await this.seeder.seedAll();
  }

  async afterEach(): Promise<void> {
    await super.afterEach();
  }

  // Public methods to access protected strapi instance
  public getStrapi() {
    return this.strapi;
  }
}

describe('User Integration Tests', () => {
  let testInstance: UserIntegrationTest;

  beforeAll(async () => {
    testInstance = new UserIntegrationTest();
    await testInstance.beforeAll();
  }, 120000); // 2 minute timeout for server startup

  afterAll(async () => {
    await testInstance.afterAll();
  });

  beforeEach(async () => {
    await testInstance.beforeEach();
  });

  afterEach(async () => {
    await testInstance.afterEach();
  });

  describe('User Registration and CRUD Operations', () => {
    it('should create user and verify database record', async () => {
      // Arrange
      const userData = testInstance.factory.createUser({
        username: 'testuser001',
        email: 'testuser001@example.com',
        password: 'SecurePassword123!',
        firstName: 'Test',
        lastName: 'User',
        isActive: true,
        role: 'authenticated'
      });

      // Act
      const createdUser = await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData);

      // Assert
      expect(createdUser).toBeDefined();
      expect(createdUser.documentId).toBeDefined();
      expect(createdUser.username).toBe(userData.username);
      expect(createdUser.email).toBe(userData.email);
      expect(createdUser.firstName).toBe(userData.firstName);
      expect(createdUser.lastName).toBe(userData.lastName);
      expect(createdUser.isActive).toBe(userData.isActive);
      expect(createdUser.role).toBe(userData.role);

      // Verify database record
      await testInstance.assertRecordExists('plugin::users-permissions.user', {
        documentId: createdUser.documentId
      }, {
        username: userData.username,
        email: userData.email,
        firstName: userData.firstName,
        lastName: userData.lastName,
        isActive: userData.isActive
      });
    });

    it('should retrieve user by documentId', async () => {
      // Arrange
      const userData = testInstance.factory.createUser({
        username: 'retrievaluser001',
        email: 'retrievaluser001@example.com'
      });
      const createdUser = await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData);

      // Act
      const retrievedUser = await testInstance.getStrapi().documents('plugin::users-permissions.user').findOne({
        documentId: createdUser.documentId,
        populate: '*'
      });

      // Assert
      expect(retrievedUser).toBeDefined();
      expect(retrievedUser.documentId).toBe(createdUser.documentId);
      expect(retrievedUser.username).toBe(userData.username);
      expect(retrievedUser.email).toBe(userData.email);
    });

    it('should update user and verify changes in database', async () => {
      // Arrange
      const userData = testInstance.factory.createUser({
        username: 'updateuser001',
        email: 'updateuser001@example.com',
        firstName: 'Original',
        lastName: 'Name'
      });
      const createdUser = await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData);

      // Act
      const updateData = {
        firstName: 'Updated',
        lastName: 'Name',
        isActive: false
      };
      const updatedUser = await testInstance.updateTestData<CreatedUserData>(
        'plugin::users-permissions.user',
        createdUser.documentId,
        updateData
      );

      // Assert
      expect(updatedUser.firstName).toBe(updateData.firstName);
      expect(updatedUser.lastName).toBe(updateData.lastName);
      expect(updatedUser.isActive).toBe(updateData.isActive);

      // Verify database record
      await testInstance.assertRecordExists('plugin::users-permissions.user', {
        documentId: createdUser.documentId
      }, {
        firstName: updateData.firstName,
        lastName: updateData.lastName,
        isActive: updateData.isActive
      });
    });

    it('should delete user and verify removal from database', async () => {
      // Arrange
      const userData = testInstance.factory.createUser({
        username: 'deleteuser001',
        email: 'deleteuser001@example.com'
      });
      const createdUser = await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData);

      // Verify user exists
      await testInstance.assertRecordExists('plugin::users-permissions.user', {
        documentId: createdUser.documentId
      });

      // Act
      await testInstance.deleteTestData('plugin::users-permissions.user', createdUser.documentId);

      // Assert
      await testInstance.assertRecordNotExists('plugin::users-permissions.user', {
        documentId: createdUser.documentId
      });
    });

    it('should retrieve multiple users with pagination', async () => {
      // Arrange
      const users: CreatedUserData[] = [];
      for (let i = 0; i < 5; i++) {
        const userData = testInstance.factory.createUser({
          username: `paginationuser${i + 1}`,
          email: `paginationuser${i + 1}@example.com`
        });
        const user = await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData);
        users.push(user);
      }

      // Act
      const retrievedUsers = await testInstance.getStrapi().documents('plugin::users-permissions.user').findMany({
        pagination: { page: 1, pageSize: 3 },
        sort: { createdAt: 'desc' }
      });

      // Assert
      expect(retrievedUsers).toBeDefined();
      expect(retrievedUsers.length).toBeLessThanOrEqual(3);
    });
  });

  describe('User Authentication and Security', () => {
    it('should validate user password requirements', async () => {
      // Arrange
      const invalidUserData = testInstance.factory.createUser({
        username: 'weakpassuser',
        email: 'weakpassuser@example.com',
        password: '123' // Weak password
      });

      // Act & Assert
      await expect(
        testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', invalidUserData)
      ).rejects.toThrow();
    });

    it('should validate user email format', async () => {
      // Arrange
      const invalidUserData = testInstance.factory.createUser({
        username: 'invalidemailuser',
        email: 'invalid-email-format', // Invalid email
        password: 'SecurePassword123!'
      });

      // Act & Assert
      await expect(
        testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', invalidUserData)
      ).rejects.toThrow();
    });

    it('should validate username uniqueness', async () => {
      // Arrange
      const userData1 = testInstance.factory.createUser({
        username: 'uniqueuser001',
        email: 'uniqueuser001@example.com'
      });
      const userData2 = testInstance.factory.createUser({
        username: 'uniqueuser001', // Same username
        email: 'uniqueuser002@example.com'
      });

      // Create first user
      await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData1);

      // Act & Assert
      await expect(
        testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData2)
      ).rejects.toThrow();
    });

    it('should validate email uniqueness', async () => {
      // Arrange
      const userData1 = testInstance.factory.createUser({
        username: 'uniqueemailuser001',
        email: 'uniqueemail@example.com'
      });
      const userData2 = testInstance.factory.createUser({
        username: 'uniqueemailuser002',
        email: 'uniqueemail@example.com' // Same email
      });

      // Create first user
      await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData1);

      // Act & Assert
      await expect(
        testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData2)
      ).rejects.toThrow();
    });

    it('should handle user account activation and deactivation', async () => {
      // Arrange
      const userData = testInstance.factory.createUser({
        username: 'activationuser001',
        email: 'activationuser001@example.com',
        isActive: true
      });
      const createdUser = await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData);

      // Act - Deactivate user
      const deactivatedUser = await testInstance.updateTestData<CreatedUserData>(
        'plugin::users-permissions.user',
        createdUser.documentId,
        { isActive: false }
      );

      // Assert
      expect(deactivatedUser.isActive).toBe(false);

      // Act - Reactivate user
      const reactivatedUser = await testInstance.updateTestData<CreatedUserData>(
        'plugin::users-permissions.user',
        createdUser.documentId,
        { isActive: true }
      );

      // Assert
      expect(reactivatedUser.isActive).toBe(true);
    });
  });

  describe('User Profile Management', () => {
    it('should update user profile information', async () => {
      // Arrange
      const userData = testInstance.factory.createUser({
        username: 'profileuser001',
        email: 'profileuser001@example.com',
        firstName: 'Original',
        lastName: 'Name'
      });
      const createdUser = await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData);

      // Act
      const profileUpdate = {
        firstName: 'Updated',
        lastName: 'Profile',
        email: 'updatedprofile@example.com'
      };
      const updatedUser = await testInstance.updateTestData<CreatedUserData>(
        'plugin::users-permissions.user',
        createdUser.documentId,
        profileUpdate
      );

      // Assert
      expect(updatedUser.firstName).toBe(profileUpdate.firstName);
      expect(updatedUser.lastName).toBe(profileUpdate.lastName);
      expect(updatedUser.email).toBe(profileUpdate.email);

      // Verify database record
      await testInstance.assertRecordExists('plugin::users-permissions.user', {
        documentId: createdUser.documentId
      }, {
        firstName: profileUpdate.firstName,
        lastName: profileUpdate.lastName,
        email: profileUpdate.email
      });
    });

    it('should handle user profile validation', async () => {
      // Arrange
      const userData = testInstance.factory.createUser({
        username: 'profilevaliduser001',
        email: 'profilevaliduser001@example.com'
      });
      const createdUser = await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData);

      // Act & Assert - Try to update with invalid email
      await expect(
        testInstance.updateTestData<CreatedUserData>('plugin::users-permissions.user', createdUser.documentId, {
          email: 'invalid-email-format'
        })
      ).rejects.toThrow();
    });
  });

  describe('User Search and Filtering', () => {
    beforeEach(async () => {
      // Create test users with different attributes
      const testUsers = [
        { username: 'searchuser001', email: 'searchuser001@example.com', firstName: 'John', lastName: 'Doe', isActive: true },
        { username: 'searchuser002', email: 'searchuser002@example.com', firstName: 'Jane', lastName: 'Smith', isActive: true },
        { username: 'searchuser003', email: 'searchuser003@example.com', firstName: 'Bob', lastName: 'Johnson', isActive: false },
        { username: 'searchuser004', email: 'searchuser004@example.com', firstName: 'Alice', lastName: 'Brown', isActive: true },
        { username: 'searchuser005', email: 'searchuser005@example.com', firstName: 'Charlie', lastName: 'Wilson', isActive: false }
      ];

      for (const userData of testUsers) {
        await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData);
      }
    });

    it('should filter users by active status', async () => {
      // Act
      const activeUsers = await testInstance.getStrapi().documents('plugin::users-permissions.user').findMany({
        filters: { isActive: true }
      });

      const inactiveUsers = await testInstance.getStrapi().documents('plugin::users-permissions.user').findMany({
        filters: { isActive: false }
      });

      // Assert
      expect(activeUsers.length).toBeGreaterThan(0);
      expect(inactiveUsers.length).toBeGreaterThan(0);
      
      activeUsers.forEach(user => {
        expect(user.isActive).toBe(true);
      });
      
      inactiveUsers.forEach(user => {
        expect(user.isActive).toBe(false);
      });
    });

    it('should search users by username', async () => {
      // Act
      const johnUsers = await testInstance.getStrapi().documents('plugin::users-permissions.user').findMany({
        filters: {
          username: { $containsi: 'searchuser' }
        }
      });

      // Assert
      expect(johnUsers.length).toBeGreaterThan(0);
      johnUsers.forEach(user => {
        expect(user.username.toLowerCase()).toContain('searchuser');
      });
    });

    it('should search users by email', async () => {
      // Act
      const exampleUsers = await testInstance.getStrapi().documents('plugin::users-permissions.user').findMany({
        filters: {
          email: { $containsi: 'example.com' }
        }
      });

      // Assert
      expect(exampleUsers.length).toBeGreaterThan(0);
      exampleUsers.forEach(user => {
        expect(user.email.toLowerCase()).toContain('example.com');
      });
    });

    it('should search users by first name', async () => {
      // Act
      const johnUsers = await testInstance.getStrapi().documents('plugin::users-permissions.user').findMany({
        filters: {
          firstName: { $containsi: 'John' }
        }
      });

      // Assert
      expect(johnUsers.length).toBeGreaterThan(0);
      johnUsers.forEach(user => {
        expect(user.firstName.toLowerCase()).toContain('john');
      });
    });

    it('should sort users by creation date', async () => {
      // Act
      const usersAsc = await testInstance.getStrapi().documents('plugin::users-permissions.user').findMany({
        sort: { createdAt: 'asc' }
      });

      const usersDesc = await testInstance.getStrapi().documents('plugin::users-permissions.user').findMany({
        sort: { createdAt: 'desc' }
      });

      // Assert
      expect(usersAsc.length).toBeGreaterThan(1);
      expect(usersDesc.length).toBeGreaterThan(1);
      
      // Verify ascending order
      for (let i = 1; i < usersAsc.length; i++) {
        expect(new Date(usersAsc[i].createdAt).getTime()).toBeGreaterThanOrEqual(new Date(usersAsc[i - 1].createdAt).getTime());
      }
      
      // Verify descending order
      for (let i = 1; i < usersDesc.length; i++) {
        expect(new Date(usersDesc[i].createdAt).getTime()).toBeLessThanOrEqual(new Date(usersDesc[i - 1].createdAt).getTime());
      }
    });
  });

  describe('User Bulk Operations', () => {
    it('should perform bulk status updates', async () => {
      // Arrange
      const users: CreatedUserData[] = [];
      for (let i = 0; i < 3; i++) {
        const userData = testInstance.factory.createUser({
          username: `bulkuser${i + 1}`,
          email: `bulkuser${i + 1}@example.com`,
          isActive: true
        });
        const user = await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData);
        users.push(user);
      }

      // Act
      const updatePromises = users.map(user =>
        testInstance.getStrapi().documents('plugin::users-permissions.user').update({
          documentId: user.documentId,
          data: { isActive: false }
        })
      );
      await Promise.all(updatePromises);

      // Assert
      for (const user of users) {
        await testInstance.assertRecordExists('plugin::users-permissions.user', {
          documentId: user.documentId
        }, {
          isActive: false
        });
      }
    });

    it('should perform bulk profile updates', async () => {
      // Arrange
      const users: CreatedUserData[] = [];
      for (let i = 0; i < 3; i++) {
        const userData = testInstance.factory.createUser({
          username: `bulkprofileuser${i + 1}`,
          email: `bulkprofileuser${i + 1}@example.com`,
          firstName: 'Original'
        });
        const user = await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData);
        users.push(user);
      }

      // Act
      const updatePromises = users.map(user =>
        testInstance.getStrapi().documents('plugin::users-permissions.user').update({
          documentId: user.documentId,
          data: { firstName: 'Updated' }
        })
      );
      await Promise.all(updatePromises);

      // Assert
      for (const user of users) {
        await testInstance.assertRecordExists('plugin::users-permissions.user', {
          documentId: user.documentId
        }, {
          firstName: 'Updated'
        });
      }
    });

    it('should perform bulk deletions', async () => {
      // Arrange
      const users: CreatedUserData[] = [];
      for (let i = 0; i < 3; i++) {
        const userData = testInstance.factory.createUser({
          username: `bulkdeleteuser${i + 1}`,
          email: `bulkdeleteuser${i + 1}@example.com`
        });
        const user = await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData);
        users.push(user);
      }

      // Act
      const deletePromises = users.map(user =>
        testInstance.deleteTestData('plugin::users-permissions.user', user.documentId)
      );
      await Promise.all(deletePromises);

      // Assert
      for (const user of users) {
        await testInstance.assertRecordNotExists('plugin::users-permissions.user', {
          documentId: user.documentId
        });
      }
    });
  });

  describe('User Count and Statistics', () => {
    beforeEach(async () => {
      // Create test users with different statuses
      const testUsers = [
        { username: 'countuser001', email: 'countuser001@example.com', isActive: true },
        { username: 'countuser002', email: 'countuser002@example.com', isActive: true },
        { username: 'countuser003', email: 'countuser003@example.com', isActive: false },
        { username: 'countuser004', email: 'countuser004@example.com', isActive: false },
        { username: 'countuser005', email: 'countuser005@example.com', isActive: true }
      ];

      for (const userData of testUsers) {
        await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData);
      }
    });

    it('should count total users', async () => {
      // Act
      const totalCount = await testInstance.countDatabaseRecords('plugin::users-permissions.user');

      // Assert
      expect(totalCount).toBeGreaterThanOrEqual(5);
    });

    it('should count users by active status', async () => {
      // Act
      const activeCount = await testInstance.countDatabaseRecords('plugin::users-permissions.user', {
        isActive: true
      });

      const inactiveCount = await testInstance.countDatabaseRecords('plugin::users-permissions.user', {
        isActive: false
      });

      // Assert
      expect(activeCount).toBeGreaterThanOrEqual(3);
      expect(inactiveCount).toBeGreaterThanOrEqual(2);
    });

    it('should count users by role', async () => {
      // Act
      const authenticatedCount = await testInstance.countDatabaseRecords('plugin::users-permissions.user', {
        role: 'authenticated'
      });

      // Assert
      expect(authenticatedCount).toBeGreaterThanOrEqual(0);
    });
  });

  describe('User Error Handling and Edge Cases', () => {
    it('should handle non-existent user operations', async () => {
      // Arrange
      const nonExistentDocumentId = 'non-existent-document-id';

      // Act & Assert
      await expect(
        testInstance.getStrapi().documents('plugin::users-permissions.user').findOne({
          documentId: nonExistentDocumentId
        })
      ).resolves.toBeNull();

      await expect(
        testInstance.updateTestData<CreatedUserData>('plugin::users-permissions.user', nonExistentDocumentId, {
          firstName: 'Updated Name'
        })
      ).rejects.toThrow();

      await expect(
        testInstance.deleteTestData('plugin::users-permissions.user', nonExistentDocumentId)
      ).rejects.toThrow();
    });

    it('should handle user data validation edge cases', async () => {
      // Arrange
      const userData = testInstance.factory.createUser({
        username: 'edgecaseuser001',
        email: 'edgecaseuser001@example.com'
      });
      const createdUser = await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData);

      // Act & Assert - Try to update with empty required fields
      await expect(
        testInstance.updateTestData<CreatedUserData>('plugin::users-permissions.user', createdUser.documentId, {
          username: '', // Empty username
          email: '' // Empty email
        })
      ).rejects.toThrow();
    });

    it('should handle user with special characters in profile', async () => {
      // Arrange
      const userData = testInstance.factory.createUser({
        username: 'specialcharuser001',
        email: 'specialcharuser001@example.com',
        firstName: 'José',
        lastName: 'García-López'
      });

      // Act
      const createdUser = await testInstance.createTestData<CreatedUserData>('plugin::users-permissions.user', userData);

      // Assert
      expect(createdUser.firstName).toBe(userData.firstName);
      expect(createdUser.lastName).toBe(userData.lastName);

      // Verify database record
      await testInstance.assertRecordExists('plugin::users-permissions.user', {
        documentId: createdUser.documentId
      }, {
        firstName: userData.firstName,
        lastName: userData.lastName
      });
    });
  });
});
