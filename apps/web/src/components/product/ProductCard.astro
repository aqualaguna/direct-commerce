---
import Badge from '../ui/Badge.astro';
import Card from '../ui/Card.astro';

export interface Props {
  product: {
    id: string;
    name: string;
    slug: string;
    price: number;
    salePrice?: number;
    image: string;
    rating?: number;
    reviewCount?: number;
    description?: string;
    isNew?: boolean;
    isOnSale?: boolean;
    isFeatured?: boolean;
    isOutOfStock?: boolean;
  };
  showQuickAdd?: boolean;
  showWishlist?: boolean;
  layout?: 'grid' | 'list' | 'compact';
  class?: string;
}

const {
  product,
  showQuickAdd = true,
  showWishlist = true,
  layout = 'grid',
  class: className = '',
} = Astro.props;

const isOnSale = product.salePrice && product.salePrice < product.price;
const discountPercentage = isOnSale 
  ? Math.round(((product.price - product.salePrice!) / product.price) * 100)
  : 0;

const cardClasses = layout === 'list' 
  ? 'flex flex-row items-center space-x-4 p-4'
  : layout === 'compact'
  ? 'flex flex-row items-center space-x-3 p-3'
  : 'flex flex-col';

const imageClasses = layout === 'list' || layout === 'compact'
  ? 'w-20 h-20 flex-shrink-0'
  : 'w-full h-48 object-cover';
---

<Card variant="default" hover={true} interactive={true} class={`group relative overflow-hidden ${cardClasses} ${className}`}>
  <!-- Product Image -->
  <div class={`relative ${layout === 'list' || layout === 'compact' ? 'w-20 h-20 flex-shrink-0' : 'w-full h-48'}`}>
    <img
      src={product.image}
      alt={product.name}
      class={`${imageClasses} rounded-lg transition-transform duration-300 group-hover:scale-105`}
      loading="lazy"
    />
    
    <!-- Badges -->
    {product.isOnSale && (
      <Badge variant="sale" position="top-left" />
    )}
    {product.isNew && (
      <Badge variant="new" position="top-right" />
    )}
    {product.isFeatured && (
      <Badge variant="featured" position="bottom-left" />
    )}
    {product.isOutOfStock && (
      <Badge variant="out-of-stock" position="bottom-right" />
    )}
    
    <!-- Quick Actions Overlay -->
    {layout === 'grid' && (
      <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100">
        <div class="flex space-x-2">
          {showQuickAdd && (
            <button class="bg-white text-gray-900 px-4 py-2 rounded-lg font-semibold hover:bg-gray-100 transition-colors shadow-lg">
              Quick Add
            </button>
          )}
          {showWishlist && (
            <button class="bg-white text-gray-900 p-2 rounded-lg hover:bg-gray-100 transition-colors shadow-lg">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
              </svg>
            </button>
          )}
        </div>
      </div>
    )}
  </div>

  <!-- Product Info -->
  <div class={`${layout === 'list' || layout === 'compact' ? 'flex-1 min-w-0' : 'p-4 flex-1 flex flex-col'}`}>
    <!-- Product Name -->
    <h3 class={`font-semibold text-gray-900 mb-1 ${layout === 'compact' ? 'text-sm' : 'text-base'} ${layout === 'list' ? 'truncate' : ''}`}>
      <a href={`/products/${product.slug}`} class="hover:text-primary-600 transition-colors">
        {product.name}
      </a>
    </h3>

    <!-- Description (only for grid layout) -->
    {layout === 'grid' && product.description && (
      <p class="text-sm text-gray-600 mb-2 line-clamp-2">
        {product.description}
      </p>
    )}

    <!-- Rating -->
    {product.rating && (
      <div class="flex items-center mb-2">
        <div class="flex items-center">
          {Array.from({ length: 5 }).map((_, i) => (
            <svg
              class={`w-4 h-4 ${i < Math.floor(product.rating!) ? 'text-yellow-400' : 'text-gray-300'}`}
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
            </svg>
          ))}
        </div>
        {product.reviewCount && (
          <span class="text-sm text-gray-500 ml-1">({product.reviewCount})</span>
        )}
      </div>
    )}

    <!-- Price -->
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-2">
        {isOnSale ? (
          <>
            <span class="text-lg font-bold text-accent-coral-600">
              ${product.salePrice}
            </span>
            <span class="text-sm text-gray-500 line-through">
              ${product.price}
            </span>
            <span class="text-xs bg-accent-coral-100 text-accent-coral-800 px-2 py-1 rounded">
              -{discountPercentage}%
            </span>
          </>
        ) : (
          <span class="text-lg font-bold text-gray-900">
            ${product.price}
          </span>
        )}
      </div>

      <!-- Add to Cart Button (for list/compact layouts) -->
      {(layout === 'list' || layout === 'compact') && showQuickAdd && (
        <button 
          class={`bg-primary-600 text-white px-3 py-1.5 rounded text-sm font-semibold hover:bg-primary-700 transition-colors ${product.isOutOfStock ? 'opacity-50 cursor-not-allowed' : ''}`}
          disabled={product.isOutOfStock}
        >
          {product.isOutOfStock ? 'Out of Stock' : 'Add to Cart'}
        </button>
      )}
    </div>
  </div>
</Card>
